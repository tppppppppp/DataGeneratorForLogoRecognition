#include <cstdio>
#include <string>
#include <fstream>
#include <direct.h>
#include <io.h>
#include <Windows.h>
#include <ctime>
#define ACCESS _access
#define MKDIR(a) _mkdir((a))
#include <opencv2/opencv.hpp>
using namespace cv;
using namespace std;


#define DIRCH '\\'

int CreateDir(string strDir)
{
    char *pszDir = new char[strDir.length()+10];
    strcpy(pszDir, strDir.c_str());
    int iRet;
    int iLen = strlen(pszDir); //在末尾加/
    if (pszDir[iLen - 1] != '\\' && pszDir[iLen - 1] != '/')
    {
        pszDir[iLen] = DIRCH;
        pszDir[iLen + 1] = '\0';
        iLen++;
    }

    // 创建目录
    for (int i = 1; i < iLen; i ++)
    {
        if (pszDir[i] == '\\' || pszDir[i] == '/')
        {
            pszDir[i] = '\0';

            //如果不存在,创建
            iRet = ACCESS(pszDir,0);
            if (iRet != 0)
            {
                iRet = MKDIR(pszDir);
                if (iRet != 0)
                {
                    return -1;
                }
            }
            //支持linux,将所有\换成/
            pszDir[i] = DIRCH;
        }
    }
    delete pszDir;

    return 0;
}

/*
* videoPath
*/
string GenVideoThumbnail(string videoPath, string outFolder)
{
	VideoCapture cap(videoPath);
	if (!cap.isOpened())
	{
		fprintf(stderr, "Error: open video file: %s failed\n", videoPath);
		return "Error";
	}
	double fpsOfVideo = cap.get(CV_CAP_PROP_FPS);
	double iNumFrames = cap.get(CV_CAP_PROP_FRAME_COUNT);
	int pos1 = videoPath.find_last_of('\\');
	int pos2 = videoPath.find_last_of('.');
	string thumbnail = outFolder + "\\" + videoPath.substr(pos1+1, pos2 - pos1 - 1) + ".jpg";
	int iFrame = 20;
	if (iFrame > iNumFrames)
	{
		iFrame = iNumFrames;
	}
	Mat frame;
	for (int i = 0; i < iFrame; i++)
	{
		cap.read(frame);
	}
	imwrite(thumbnail, frame);
	cap.release();
	return thumbnail;
}

std::string ToUTF8(const wchar_t* buffer, int len)
{
	int size = ::WideCharToMultiByte(CP_UTF8, 0, buffer, len, NULL, 0, NULL,
			NULL);
	if (size == 0)
		return "";

	std::string newbuffer;
	newbuffer.resize(size);
	::WideCharToMultiByte(CP_UTF8, 0, buffer, len,
			const_cast<char*>(newbuffer.c_str()), size, NULL, NULL);

	return newbuffer;
}

std::string ToUTF8(const std::wstring& str)
{
	return ToUTF8(str.c_str(), (int) str.size());
}

//旋转图像内容不变，尺寸相应变大
IplImage* rotateImage(IplImage* img, int degree)  
{  
	double angle = degree  * CV_PI / 180.; 
	double a = sin(angle), b = cos(angle); 
	int width=img->width, height=img->height;
	//旋转后的新图尺寸
	int width_rotate= int(height * fabs(a) + width * fabs(b));  
	int height_rotate=int(width * fabs(a) + height * fabs(b));  
	IplImage* img_rotate = cvCreateImage(cvSize(width_rotate, height_rotate), img->depth, img->nChannels);  
    cvSet(img_rotate, CV_RGB(255, 255, 255));
	//保证原图可以任意角度旋转的最小尺寸
	int tempLength = sqrt((double)width * width + (double)height *height) + 10;  
	int tempX = (tempLength + 1) / 2 - width / 2;  
	int tempY = (tempLength + 1) / 2 - height / 2;  
	IplImage* temp = cvCreateImage(cvSize(tempLength, tempLength), img->depth, img->nChannels);  
    cvSet(temp, CV_RGB(200, 200, 200));
	//将原图复制到临时图像tmp中心
	cvSetImageROI(temp, cvRect(tempX, tempY, width, height));  
	cvCopy(img, temp, NULL);  
	cvResetImageROI(temp);  
	//旋转数组map
	// [ m0  m1  m2 ] ===>  [ A11  A12   b1 ]
	// [ m3  m4  m5 ] ===>  [ A21  A22   b2 ]
	float m[6];  
	int w = temp->width; 
	int h = temp->height;
	m[0] = b;  
	m[1] = a;  
	m[3] = -m[1];  
	m[4] = m[0];  
	// 将旋转中心移至图像中间  
	m[2] = w * 0.5f;  
	m[5] = h * 0.5f;  
	CvMat M = cvMat(2, 3, CV_32F, m);  
	cvGetQuadrangleSubPix(temp, img_rotate, &M);  
	cvReleaseImage(&temp);
	return img_rotate;
}

IplImage* toGray(IplImage* img)
{
  IplImage* dst = cvCreateImage(cvGetSize(img), IPL_DEPTH_8U, 1);//用原图像指针创建新图像
  if(NULL == dst) return NULL;
  cvCvtColor(img, dst, CV_BGR2GRAY);
  return dst;
}


//对背景图像添加旋转一定角度的logo
Mat addLogoRotate(string img_bg, string img_logo, int rotate_degree)
{
    Mat srcImage = imread(img_bg);
    Mat logoImage = imread(img_logo);
    Mat rotate_img = Mat(rotateImage(&IplImage(logoImage), rotate_degree));
    Mat mask = Mat(toGray(&IplImage(rotate_img)));
    Mat imageROI = srcImage(Rect(10, 10, mask.cols, mask.rows));
    threshold(mask, mask, 150, 255, CV_THRESH_BINARY);
    Mat mask1 = 255 - mask;
    rotate_img.copyTo(imageROI, mask1);
    return srcImage;
}

Mat imageAffine(Mat img_logo, Point2f srcTri[3], Point2f dstTri[3])
{
    int width = img_logo.cols, height = img_logo.rows;
	//保证原图可以任意角度旋转的最小尺寸
	int tempLength = sqrt((double)width * width + (double)height *height) + 10;  
	int tempX = (tempLength + 1) / 2 - width / 2;
	int tempY = (tempLength + 1) / 2 - height / 2;
    IplImage* temp = cvCreateImage(cvSize(tempLength, tempLength), 8, img_logo.channels());  
    cvSet(temp, CV_RGB(200, 200, 200));
	Mat warp_dst(temp);
	// 读入图像
	// 用3个点确定A仿射变换
	Mat warp_mat = getAffineTransform( srcTri, dstTri );
	warpAffine( img_logo, warp_dst, warp_mat, warp_dst.size(), CV_INTER_LINEAR+CV_WARP_FILL_OUTLIERS, BORDER_TRANSPARENT );
    return warp_dst;
}

Mat addLogoAffine(string img_bg, string img_logo)
{
    Mat srcImage = imread(img_bg);
    Mat logoImage = imread(img_logo);
    //random affine matrix
    srand(clock());
    Point2f srcTri[3];
	Point2f dstTri[3];
    // 用3个点确定A仿射变换
	srcTri[0] = Point2f( 0, 0);
	srcTri[1] = Point2f( logoImage.cols - 1, 0 );
	srcTri[2] = Point2f( 0, logoImage.rows - 1 );
	dstTri[0] = Point2f( logoImage.cols * (rand() % 100) / 300.0, logoImage.rows * (rand() % 100) / 300.0 );
	dstTri[1] = Point2f( logoImage.cols * (1 - (rand() % 100) / 300.0), logoImage.rows * (rand() % 100) / 300.0 );
	dstTri[2] = Point2f( logoImage.cols * (rand() % 100) / 300.0, logoImage.rows * (1 - (rand() % 100) / 300.0) );
    Mat rotate_img = imageAffine(logoImage, srcTri, dstTri);
    Mat mask = Mat(toGray(&IplImage(rotate_img)));
    Mat imageROI = srcImage(Rect(10, 10, mask.cols, mask.rows));
    threshold(mask, mask, 150, 255, CV_THRESH_BINARY);
    Mat mask1 = 255 - mask;
    rotate_img.copyTo(imageROI, mask1);
    return srcImage;
}

Mat addLogoScale(string img_bg, string img_logo, double ratio)
{
    Mat srcImage = imread(img_bg);
    Mat logoImage = imread(img_logo);
    //random affine matrix
    srand(clock());
    Point2f srcTri[3];
	Point2f dstTri[3];
    // 用3个点确定A仿射变换
	srcTri[0] = Point2f( 0, 0);
	srcTri[1] = Point2f( logoImage.cols - 1, 0 );
	srcTri[2] = Point2f( 0, logoImage.rows - 1 );
	dstTri[0] = Point2f( 0, 0 );
	dstTri[1] = Point2f( logoImage.cols * ratio, 0 );
	dstTri[2] = Point2f( 0, logoImage.rows * ratio );
    Mat rotate_img = imageAffine(logoImage, srcTri, dstTri);
    Mat mask = Mat(toGray(&IplImage(rotate_img)));
    Mat imageROI = srcImage(Rect(10, 10, mask.cols, mask.rows));
    threshold(mask, mask, 150, 255, CV_THRESH_BINARY);
    Mat mask1 = 255 - mask;
    rotate_img.copyTo(imageROI, mask1);
    return srcImage;
}

int main(int argc, char *argv[])
{
    string bg = "background.jpg";
    string fg = "logo.png";
    //Mat image = addLogoRotate(bg, fg, 150);
    //Mat image = addLogoAffine(bg, fg);
    Mat image = addLogoScale(bg, fg, 0.5);
    namedWindow("<1>利用ROI实现图像叠加示例窗口");
    imshow("<1>利用ROI实现图像叠加示例窗口", image);
    cvWaitKey(0);
	  return 0;
}
